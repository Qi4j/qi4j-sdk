/*
* Copyright 2008-2023 Qi4j Community (see commit log). All Rights Reserved
*
* Licensed  under the  Apache License,  Version 2.0  (the "License");
* you may not use  this file  except in  compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed  under the  License is distributed on an "AS IS" BASIS,
* WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
* implied.
*
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import org.qi4j.gradle.dependencies.DependenciesDeclarationExtension

def dependencies = extensions.getByType(DependenciesDeclarationExtension)

// Gradle version
dependencies.gradleVersion = '7.2'

// Remote repositories
dependencies.repositoriesUrls << [
        mavenCentral: "https://repo1.maven.org/maven2/",
        restlet     : 'https://maven.restlet.talend.com',
        clojars     : "https://clojars.org/repo/",
]

// Core dependencies
def annotationVersion = '1.3.5'
def asmVersion = '9.5'
def javaxJsonVersion = '1.1.4'
def osgiVersion = '8.0.0'
dependencies.libraries << [
        annotation : "jakarta.annotation:jakarta.annotation-api:$annotationVersion",
        asm        : "org.ow2.asm:asm:$asmVersion",
        asm_commons: "org.ow2.asm:asm-commons:$asmVersion",
        asm_util   : "org.ow2.asm:asm-util:$asmVersion",
        javax_json : "javax.json:javax.json-api:$javaxJsonVersion",
        osgi_core  : "org.osgi:osgi.core:$osgiVersion",
]

// Extensions, Libraries and Tools dependencies
def accumuloVersion = '1.6.4'
def bdbjeVersion = '18.3.12'
def bonecpVersion = '0.8.0.RELEASE'
def bouncyVersion = '1.57'
def cassandraClientVersion = '3.3.0'
def codahaleMetricsVersion = '3.2.3'
def commonsDbcpVersion = '2.10.0'
def commonsLangVersion = '3.13.0'
def commonsValidatorVersion = '1.7'
def derbyVersion = '10.14.1.0'
def ehcacheVersion = '3.4.0'
def elasticsearchVersion = '5.5.2'
def freemarkerVersion = '2.3.26-incubating'
def geodeVersion = '1.2.0'
def groovyVersion = '4.0.12'
def hazelcastVersion = '3.8.5'
def httpClientVersion = '4.5.3'
def jacksonVersion = '2.8.9'
def jaxbApiVersion = '2.2.12'
def jdbmVersion = '2.0.1'
def jcloudsVersion = '2.3.0'

def jedisVersion = '3.7.0'
def jerseyVersion = '3.0.2'
def jettyVersion = '11.0.6'
def johnzonVersion = '1.1.13'
def jooqVersion = '3.14.14'
def kafkaVersion = '2.8.0'
def kotlinVersion = '1.2.31'
def leveldbVersion = '0.12'
def leveldbJniVersion = '1.8'
def liquibaseVersion = '3.5.3'
def mariadbDriverVersion = '2.7.4'
def mapdbVersion = '3.0.7'
def mongodbVersion = '3.4.2'
def msgpackVersion = '0.8.13'
def pulsarVersion = '3.1.0'
def restletVersion = '2.4.3'
def rdf4jVersion = '2.3.1' // Version '3.1.2' is available, but Apache Rya wants 2.3.1
def riakVersion = '2.1.1'
def ryaVersion = '4.0.0-incubating'
def servletVersion = '5.0.0'
def shiroVersion = '2.0.0-alpha-1'
def slf4jVersion = '1.7.25'
def solrVersion = "5.5.4"
def springVersion = '5.0.5.RELEASE'
def spymemcachedVersion = '2.12.3'
def velocityVersion = '1.7'
def zookeeperVersion = '3.4.10'

dependencies.libraries << [
        accumulo          : ["org.apache.accumulo:accumulo-core:$accumuloVersion"],
        bdb_je            : "com.sleepycat:je:$bdbjeVersion",
        bonecp            : "com.jolbox:bonecp:$bonecpVersion",
        bouncy_castle     : [
                "org.bouncycastle:bcprov-jdk15on:$bouncyVersion",
                "org.bouncycastle:bcpkix-jdk15on:$bouncyVersion",
                "org.bouncycastle:bctls-jdk15on:$bouncyVersion"
        ],
        cassandra_client  : "com.datastax.cassandra:cassandra-driver-core:$cassandraClientVersion",
        codahale_metrics  : ["io.dropwizard.metrics:metrics-core:$codahaleMetricsVersion",
                             "io.dropwizard.metrics:metrics-healthchecks:$codahaleMetricsVersion"],
        commons_dbcp      : "org.apache.commons:commons-dbcp2:$commonsDbcpVersion",
        commons_lang      : "org.apache.commons:commons-lang3:$commonsLangVersion",
        commons_validator : "commons-validator:commons-validator:$commonsValidatorVersion",
        ehcache           : "org.ehcache:ehcache:$ehcacheVersion",
        elasticsearch     : ["org.elasticsearch:elasticsearch:$elasticsearchVersion",
                             "org.elasticsearch.client:transport:$elasticsearchVersion",
                             // Elasticsearch 5.0 do not work with log4j 2.7
                             "org.apache.logging.log4j:log4j-api:2.8.2",
                             "org.apache.logging.log4j:log4j-core:2.8.2"],
        freemarker        : "org.freemarker:freemarker:$freemarkerVersion",
        geode             : "org.apache.geode:geode-core:$geodeVersion",
        groovy            : "org.apache.groovy:groovy-all:$groovyVersion",
        hazelcast         : "com.hazelcast:hazelcast:$hazelcastVersion",
        http_client       : "org.apache.httpcomponents:httpclient:$httpClientVersion",
        jackson_mapper    : "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
        jaxb_api          : "javax.xml.bind:jaxb-api:$jaxbApiVersion",
        jclouds_core      : "org.apache.jclouds:jclouds-core:$jcloudsVersion",
        jclouds_blobstore : "org.apache.jclouds:jclouds-allblobstore:$jcloudsVersion",
        jclouds_filesystem: "org.apache.jclouds.api:filesystem:$jcloudsVersion",
        jdbm              : "org.fusesource.jdbm:jdbm:$jdbmVersion",
        jersey_server     : [
                "org.glassfish.jersey.core:jersey-server:$jerseyVersion",
                "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion",
                "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
        ],
        jetty_server      : "org.eclipse.jetty:jetty-server:$jettyVersion",
        jetty_webapp      : "org.eclipse.jetty:jetty-webapp:$jettyVersion",
        jetty_servlet     : "org.eclipse.jetty:jetty-servlet:$jettyVersion",
        jetty_http        : "org.eclipse.jetty:jetty-http:$jettyVersion",
        jetty_io          : "org.eclipse.jetty:jetty-io:$jettyVersion",
        jetty_jmx         : "org.eclipse.jetty:jetty-jmx:$jettyVersion",
        jetty_security    : "org.eclipse.jetty:jetty-security:$jettyVersion",
        jetty_jsp         : "org.eclipse.jetty:jetty-jsp:$jettyVersion",
        jetty_util        : "org.eclipse.jetty:jetty-util:$jettyVersion",
        jetty_continuation: "org.eclipse.jetty:jetty-continuation:$jettyVersion",
        jetty_client      : "org.eclipse.jetty:jetty-client:$jettyVersion",
        jetty_xml         : "org.eclipse.jetty:jetty-xml:$jettyVersion",
        johnzon           : "org.apache.johnzon:johnzon-core:$johnzonVersion",
        jooq              : "org.jooq:jooq:$jooqVersion",
        jedis             : "redis.clients:jedis:$jedisVersion",
        kafka             : [
                "org.apache.kafka:kafka-clients:$kafkaVersion",
                "org.apache.kafka:kafka-streams:$kafkaVersion"
        ],
        kotlin            : "org.jetbrains.kotlin:kotlin-project:$kotlinVersion",
        leveldb_api       : "org.iq80.leveldb:leveldb-api:$leveldbVersion",
        leveldb_java      : "org.iq80.leveldb:leveldb:$leveldbVersion",
        leveldb_jni_all   : "org.fusesource.leveldbjni:leveldbjni-all:$leveldbJniVersion",
        liquibase         : "org.liquibase:liquibase-core:$liquibaseVersion",
        mariadb_driver    : "org.mariadb.jdbc:mariadb-java-client:$mariadbDriverVersion",
        mapdb             : "org.mapdb:mapdb:$mapdbVersion",
        mongodb           : "org.mongodb:mongo-java-driver:$mongodbVersion",
        msgpack           : "org.msgpack:msgpack-core:$msgpackVersion",
        osgi_annotation   : "org.osgi:osgi.annotation:$osgiVersion",
        osgi_compendium   : "org.osgi:osgi.cmpn:$osgiVersion",
        osgi_enterprise   : "org.osgi:osgi.enterprise:$osgiVersion",
        osgi_promise      : "org.osgi:osgi.promise:$osgiVersion",
        pulsar            : ["org.apache.pulsar:pulsar-client-api:$pulsarVersion",
                             "org.apache.pulsar:pulsar-client-all:$pulsarVersion",
                             "org.apache.pulsar:pulsar-client-admin-api:$pulsarVersion"
        ],
        rdf4j             : ["org.eclipse.rdf4j:rdf4j-query:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-queryresultio-sparqlxml:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-queryresultio-sparqljson:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-repository-dataset:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-repository-api:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-repository-http:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-repository-sparql:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-repository-event:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-rio:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-rio-n3:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-rio-ntriples:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-rio-rdfjson:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-rio-rdfxml:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-rio-jsonld:$rdf4jVersion",
//                             "org.eclipse.rdf4j:rdf4j-sail-extensible-store:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-sail-nativerdf:$rdf4jVersion",
                             "org.eclipse.rdf4j:rdf4j-sail-memory:$rdf4jVersion"],
        restlet           : ["org.restlet.jee:org.restlet:$restletVersion",
                             "org.restlet.jee:org.restlet.ext.atom:$restletVersion",
                             "org.restlet.jee:org.restlet.ext.servlet:$restletVersion",
                             "org.restlet.jee:org.restlet.ext.slf4j:$restletVersion"],
        restlet_xml       : "org.restlet.jee:org.restlet.ext.xml:$restletVersion",
        riak              : "com.basho.riak:riak-client:$riakVersion",
        rya               : ["org.apache.rya:rya.api:$ryaVersion",
                             "org.apache.rya:rya.common:$ryaVersion",
                             "org.apache.rya:rya.dao:$ryaVersion",
                             "org.apache.rya:rya.prospector:$ryaVersion",
                             "org.apache.rya:rya.sail:$ryaVersion"],
        servlet_api       : "jakarta.servlet:jakarta.servlet-api:$servletVersion",
        shiro             : "org.apache.shiro:shiro-core:$shiroVersion",
        shiro_web         : "org.apache.shiro:shiro-web:$shiroVersion",
        slf4j_api         : "org.slf4j:slf4j-api:$slf4jVersion",
        solr              : ["org.apache.solr:solr-core:$solrVersion",
                             "org.apache.solr:solr-solrj:$solrVersion"],
        spring_core       : ["org.springframework:spring-beans:$springVersion",
                             "org.springframework:spring-context:$springVersion"],
        spymemcached      : "net.spy:spymemcached:$spymemcachedVersion",
        velocity          : "org.apache.velocity:velocity:$velocityVersion",
        zookeeper         : "org.apache.zookeeper:zookeeper:$zookeeperVersion"
]

// Tools dependencies
def jgoodiesLooksVersion = '2.7.0'
def pdfboxVersion = '2.0.6'
def prefuseVersion = '1.0.1'
dependencies.libraries << [
        jgoodies_looks: "com.jgoodies:jgoodies-looks:$jgoodiesLooksVersion",
        pdfbox        : "org.apache.pdfbox:pdfbox:$pdfboxVersion",
        prefuse       : "de.sciss:prefuse-core:$prefuseVersion",
]

// Runtime, Test and Samples dependencies
def awaitilityVersion = '3.0.0'
def dnsJavaVersion = '3.0.2'
def dockerJUnit5Version = '1.0.0'
def dockerJavaVersion = '3.3.3'

def easyMockVersion = '3.4'
def h2Version = '1.4.196'
def hamcrestVersion = '2.2'
def jaxRsApiVersion = '2.0.1'
def junitVersion = '5.10.0'
def logbackVersion = '1.2.3' // TODO Replace with Apache Log4j 2
def mockitoVersion = '3.12.4'
def mysqlVersion = '8.0.25'
def postgresqlVersion = '42.1.4'
def sqliteVersion = '3.19.3'
def testcontainersVersion = '1.16.0'
def xmlUnitVersion = '2.3.0'
dependencies.libraries << [
        awaitility        : "org.awaitility:awaitility:$awaitilityVersion",
        derby             : "org.apache.derby:derby:$derbyVersion",
        dnsjava           : "dnsjava:dnsjava:$dnsJavaVersion",
        docker_junit      : [
                "com.github.faustxvi:junit5-docker:$dockerJUnit5Version",
                "com.github.docker-java:docker-java:$dockerJavaVersion"
        ],
        docker_java       : "com.github.docker-java:docker-java:$dockerJavaVersion",

        easymock          : "org.easymock:easymock:$easyMockVersion",
        h2                : "com.h2database:h2:$h2Version",
        hamcrest          : ["org.hamcrest:hamcrest-core:$hamcrestVersion",
                             "org.hamcrest:hamcrest-library:$hamcrestVersion"],
        jersey_test       : [
                "org.junit.vintage:junit-vintage-engine:$junitVersion",
                "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion"
        ],
        junit             : ["org.junit.jupiter:junit-jupiter-api:$junitVersion",
                             "org.junit.jupiter:junit-jupiter-params:$junitVersion",
        ],
        junit_engine      : "org.junit.jupiter:junit-jupiter-engine:$junitVersion",

        logback           : "ch.qos.logback:logback-classic:$logbackVersion",
        mockito           : "org.mockito:mockito-core:$mockitoVersion",
        mysql_connector   : "mysql:mysql-connector-java:$mysqlVersion",
        postgres          : "org.postgresql:postgresql:$postgresqlVersion",
        spring_testsupport: "org.springframework:spring-test:$springVersion",
        sqlite            : "org.xerial:sqlite-jdbc:$sqliteVersion",
        testcontainers    : [
                "org.testcontainers:mysql:$testcontainersVersion",
                "org.testcontainers:postgresql:$testcontainersVersion",
                "org.testcontainers:mariadb:$testcontainersVersion",
                "org.testcontainers:kafka:$testcontainersVersion",
                "org.testcontainers:testcontainers:$testcontainersVersion",
                "org.testcontainers:junit-jupiter:$testcontainersVersion"
        ],
        xmlunit           : "org.xmlunit:xmlunit-matchers:$xmlUnitVersion",
]

// Default dependencies
dependencies.defaultDependencies << [
        testImplementation: [dependencies.libraries.junit, dependencies.libraries.hamcrest]
]

// Resolution rules
dependencies.dependencySubstitutionSpec = { DependencySubstitution substitution, ModuleComponentSelector dep ->
    // Always resolve ASM to the same version
    if (dep.group == 'org.ow2.asm') {
        substitution.useTarget group: dep.group, name: dep.module, version: asmVersion
    }
    // Always resolve OSGi to the same version
    else if (dep.group == 'org.osgi') {
        substitution.useTarget group: dep.group, name: dep.module, version: osgiVersion
    }
    // Always resolve SLF4J to the same version
    else if (dep.group == 'org.slf4j') {
        substitution.useTarget group: dep.group, name: dep.module, version: slf4jVersion
    }
    // Always resolve Jackson to the same version
    else if (dep.group.startsWith('com.fasterxml.jackson') && dep.module != 'jackson-parent') {
        substitution.useTarget group: dep.group, name: dep.module, version: jacksonVersion
    }
    // Always resolve JAX-RS API to the same version
    else if (['jaxrs-api', 'jsr311-api', 'javax.ws.rs-api'].contains(dep.module)) {
        substitution.useTarget group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: jaxRsApiVersion
    }
    // woodstox:wstx-asl is broken (no pom), use org.codehaus.woodstox:wstx-asl instead
    else if (dep.group == 'woodstox' && dep.module == 'wstx-asl') {
        substitution.useTarget group: 'org.codehaus.woodstox', name: 'wstx-asl', version: dep.version
    }
    // some bad citizens have SNAPSHOT parents ...
    else if (dep.module == 'commons-sandbox-parent' && dep.version == '3-SNAPSHOT') {
        substitution.useTarget group: dep.group, name: dep.module, version: '3'
    }
    // Findbugs Annotation is LGPL, use https://github.com/stephenc/findbugs-annotations which is
    // Apache 2 licensed instead
    else if (dep.group == 'net.sourceforge.findbugs' && dep.module == 'annotations') {
        substitution.useTarget group: 'com.github.stephenc.findbugs', name: 'findbugs-annotations', version: '1.3.9-1'
    }
}

// NodeJS
dependencies.nodeVersions << [
        node: '6.10.2',
        npm : '4.4.4'
]

// Build Tools
dependencies.buildToolsVersions << [
        jacoco: '0.8.7'
]

// Docker Images
dependencies.dockerImagesVersions << [
        cassandra: 'cassandra:3.11',
        memcached: 'memcached:1.4.39-alpine',
        mariadb  : 'mariadb:10.1.21',
        mongo    : 'mongo:3.5.10',
        mysql    : 'mysql:8',
        postgres : 'postgres:9-alpine',
        redis    : 'redis:4.0.0-alpine',
        riak     : 'basho/riak-kv:ubuntu-2.2.3',
        s3server : 'scality/s3server:mem-bb2a38c0',
        zookeeper: 'zookeeper:3.4.11'
]
