include "core:functional",
        "core:io",
        "core:api",
        "core:spi",
        "core:testsupport",
        "core:bootstrap",
        "core:runtime",
        'libraries:auth',
        'libraries:alarm',
        'libraries:cache',
        'libraries:circuitbreaker',
        'libraries:constraints',
        'libraries:conversion',
        'libraries:cxf',
        'libraries:eventsourcing',
        'libraries:eventsourcing-jdbm',
        'libraries:eventsourcing-rest',
        'libraries:fileconfig',
        'libraries:http',
        'libraries:jmx',
        'libraries:locking',
        'libraries:logging',
        'libraries:metrics',
        'libraries:neo4j',
        'libraries:osgi',
        'libraries:rdf',
        'libraries:rest',
        'libraries:rest-client',
        'libraries:rest-common',
        'libraries:rest-server',
        'libraries:scheduler',
        'libraries:scripting:common',
        'libraries:scripting:beanshell',
        'libraries:scripting:groovy',
        'libraries:scripting:javascript',
        'libraries:scripting:jruby',
        'libraries:servlet',
        'libraries:shiro-core',
        'libraries:shiro-web',
        'libraries:spring',
        'libraries:sql',
        'libraries:struts2-plugin',
        'libraries:struts2-codebehind',
        'libraries:struts2-convention',
        'libraries:uid',
        'extensions:cache-ehcache',
        'extensions:entitystore-file',
        'extensions:entitystore-gae',
        'extensions:entitystore-hazelcast',
        'extensions:entitystore-jdbm',
        'extensions:entitystore-mongodb',
        'extensions:entitystore-neo4j',
        'extensions:entitystore-preferences',
        'extensions:entitystore-qrm',
        'extensions:entitystore-sql',
        'extensions:entitystore-voldemort',
        'extensions:indexing-rdf',
        'extensions:indexing-solr',
        'extensions:indexing-sql',
        'extensions:metrics-yammer',
        'extensions:migration',
        'extensions:reindexer',
        'manual',
        'samples:dci',
        'samples:dci-cargo:dcisample_a',
        'samples:dci-cargo:dcisample_b',
        'samples:forum',
        'samples:rental',
        'samples:struts2Hello',
        'samples:scala',
        'samples:swing',
        'tools:entity-viewer',
        'tools:envisage',
        'tutorials:cargo',
        'tutorials:composites',
        'tutorials:hello',
        'tutorials:introduction',
        'tutorials:introduction:twominutes',
        'tutorials:introduction:tenminutes',
//        'tutorials:introduction:thirtyminutes',
//        'tutorials:introduction:twohours',
'tutorials:services',
'tests:complex:gae',
'tests:regression',
'tests:performance'
rootProject.name = "org.qi4j"

validateProject(rootProject, "")

def validateProject(project, parentName)
{
  assert project.projectDir.isDirectory()
  if( new File("$project.projectDir/src/main/java").exists() )
  {
    assert project.buildFile.isFile()
  }
  if( parentName == 'org.qi4j.libraries' )
  {
    parentName = 'org.qi4j.library'
  }
  if( parentName.endsWith('s') )
  {
    parentName = parentName.substring(0, parentName.length() - 1)
  }
  if( parentName.length() > 0 )
  {
    project.name = parentName + "." + project.name
  }
  println "Project: " + project.name
  project.children.each { child ->
    validateProject(child, project.name)
  }
}

