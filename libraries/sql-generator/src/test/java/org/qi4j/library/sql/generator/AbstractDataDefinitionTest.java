/*
 * Copyright (c) 2010, Stanislav Muhametsin. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.qi4j.library.sql.generator;

import org.qi4j.library.sql.generator.grammar.builders.definition.TableDefinitionBuilder;
import org.qi4j.library.sql.generator.grammar.builders.definition.TableElementListBuilder;
import org.qi4j.library.sql.generator.grammar.definition.table.AutoGenerationPolicy;
import org.qi4j.library.sql.generator.grammar.definition.table.ConstraintCharacteristics;
import org.qi4j.library.sql.generator.grammar.definition.table.MatchType;
import org.qi4j.library.sql.generator.grammar.definition.table.ReferentialAction;
import org.qi4j.library.sql.generator.grammar.definition.table.TableDefinition;
import org.qi4j.library.sql.generator.grammar.definition.table.UniqueSpecification;
import org.qi4j.library.sql.generator.grammar.factories.DataTypeFactory;
import org.qi4j.library.sql.generator.grammar.factories.DefinitionFactory;
import org.qi4j.library.sql.generator.grammar.factories.TableReferenceFactory;
import org.qi4j.library.sql.generator.vendor.SQLVendor;
import org.junit.jupiter.api.Test;
import org.qi4j.library.sql.generator.vendor.SQLVendor;

/**
 */
public abstract class AbstractDataDefinitionTest extends AbstractSQLSyntaxTest
{

    @Test
    public void definition1()
        throws Exception
    {
        // @formatter:off
        /*
         * CREATE TABLE qi4j_schema.qname_9
         * (
         * qname_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
         * entity_pk bigint NOT NULL,
         * parent_qname integer,
         * collection_path ltree NOT NULL,
         * qname_value integer,
         * PRIMARY KEY (qname_id, entity_pk),
         * CONSTRAINT qname_9_parent_qname_fkey FOREIGN KEY (parent_qname, entity_pk)
         * REFERENCES qi4j_schema.all_qnames (qname_id, entity_pk) MATCH SIMPLE
         * ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
         * CONSTRAINT qname_9_qname_id_fkey FOREIGN KEY (qname_id, entity_pk)
         * REFERENCES qi4j_schema.all_qnames (qname_id, entity_pk) MATCH SIMPLE
         * ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED,
         * CONSTRAINT qname_9_qname_value_fkey FOREIGN KEY (qname_value)
         * REFERENCES qi4j_schema.used_classes (used_class_id)
         * ON UPDATE CASCADE ON DELETE RESTRICT
         * )
         */

        SQLVendor vendor = this.getVendor();
        TableReferenceFactory t = vendor.getTableReferenceFactory();
        DefinitionFactory d = vendor.getDefinitionFactory();
        DataTypeFactory dt = vendor.getDataTypeFactory();
        String schemaName = "qi4j_schema";

        TableDefinitionBuilder builder = d.createTableDefinitionBuilder();
        builder
            .setTableName( t.tableName( schemaName, "qname_9" ) );

        TableElementListBuilder cBuilder = d.createTableElementListBuilder();
        cBuilder
            .addTableElement( d.createColumnDefinition( "qname_id", dt.integer(), false, AutoGenerationPolicy.BY_DEFAULT ) )
            .addTableElement( d.createColumnDefinition( "entity_pk", dt.bigInt(), false ) )
            .addTableElement( d.createColumnDefinition( "parent_qname", dt.integer() ) )
            .addTableElement( d.createColumnDefinition( "collection_path", dt.userDefined( "ltree" ), false ) )
            .addTableElement( d.createColumnDefinition( "qname_value", dt.integer() ) )
            .addTableElement( d.createTableConstraintDefinition(
                d.createUniqueConstraintBuilder()
                 .setUniqueness( UniqueSpecification.PRIMARY_KEY )
                 .addColumns( "qname_id", "entity_pk" )
                 .createExpression() )
                            )
            .addTableElement(
                d.createTableConstraintDefinition(
                    "qname_9_parent_qname_fkey",
                    d.createForeignKeyConstraintBuilder()
                     .addSourceColumns( "parent_qname", "entity_pk" )
                     .setTargetTableName( t.tableName( schemaName, "all_qnames" ) )
                     .addTargetColumns( "qname_id", "entity_pk" )
                     .setMatchType( MatchType.SIMPLE )
                     .setOnUpdate( ReferentialAction.CASCADE )
                     .setOnDelete( ReferentialAction.CASCADE )
                     .createExpression(),
                    ConstraintCharacteristics.INITIALLY_DEFERRED_DEFERRABLE
                                                 )
                            )
            .addTableElement(
                d.createTableConstraintDefinition(
                    "qname_9_qname_id_fkey",
                    d.createForeignKeyConstraintBuilder()
                     .addSourceColumns( "qname_id", "entity_pk" )
                     .setTargetTableName( t.tableName( schemaName, "all_qnames" ) )
                     .addTargetColumns( "qname_id", "entity_pk" )
                     .setMatchType( MatchType.SIMPLE )
                     .setOnUpdate( ReferentialAction.CASCADE )
                     .setOnDelete( ReferentialAction.CASCADE )
                     .createExpression(),
                    ConstraintCharacteristics.INITIALLY_DEFERRED_DEFERRABLE
                                                 )
                            )
            .addTableElement(
                d.createTableConstraintDefinition(
                    "qname_9_qname_value_fkey",
                    d.createForeignKeyConstraintBuilder()
                     .addSourceColumns( "qname_value" )
                     .setTargetTableName( t.tableName( schemaName, "used_classes" ) )
                     .addTargetColumns( "used_class_id" )
                     .setOnUpdate( ReferentialAction.CASCADE )
                     .setOnDelete( ReferentialAction.RESTRICT )
                     .createExpression()
                                                 )
                            );

        builder.setTableContentsSource( cBuilder.createExpression() );

        this.logStatement( "Table definition", vendor, builder.createExpression() );

        // @formatter:on
    }

    @Test
    public void definition2()
        throws Exception
    {
        SQLVendor vendor = this.getVendor();
        TableReferenceFactory t = vendor.getTableReferenceFactory();
        DefinitionFactory d = vendor.getDefinitionFactory();
        DataTypeFactory dt = vendor.getDataTypeFactory();

        String schemaName = "the_schema";
        String tableName = "the_table";
        String colPKName = "pk_column";
        String colValueName = "value_column";

        TableDefinition def = d
            .createTableDefinitionBuilder()
            .setTableName( t.tableName( schemaName, tableName ) )
            .setTableContentsSource(
                d.createTableElementListBuilder()
                 .addTableElement( d.createColumnDefinition( colPKName, dt.integer(), false ) )
                 .addTableElement( d.createColumnDefinition( colValueName, dt.sqlVarChar(), false ) )
                 .addTableElement(
                     d.createTableConstraintDefinition( d.createUniqueConstraintBuilder()
                                                         .setUniqueness( UniqueSpecification.PRIMARY_KEY ).addColumns( colPKName )
                                                         .createExpression() ) )
                 .addTableElement(
                     d.createTableConstraintDefinition( d.createUniqueConstraintBuilder()
                                                         .setUniqueness( UniqueSpecification.UNIQUE ).addColumns( colValueName ).createExpression() ) )
                 .createExpression() ).createExpression();

        this.logStatement( "Table definition", vendor, def );
    }
}
