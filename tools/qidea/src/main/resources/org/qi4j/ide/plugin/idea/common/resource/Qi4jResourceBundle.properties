#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
#

# *****************************************************************************
# Common
# *****************************************************************************
qi4j.quick.fixes.family.name=Qi4j
qi4j.action.group.title=Qi4j
qi4j.action.group.description=Qi4j
qi4j.inspections.name=Qi4j issues
qi4j.file.template.group.title=Qi4j

# *****************************************************************************
# Concern
# *****************************************************************************

# =========
# Intention
# =========
add.concern.family.name=Add Qi4j Concern
add.concern.name=Add Qi4j Concern

# ==========
# Inspection
# ==========
concerns.annotation.declared.correctly.name.display=Concern class extends ConcernOf abstract class
concerns.annotation.declared.correctly.error.concern.class.does.not.extend.ConcernOf=Concern class ''{0}'' does not inherit ''org.qi4j.composite.ConcernOf'' class.
concerns.annotation.declared.correctly.fix.remove.concern.class.reference=Remove ''{0}'' concern class reference.
concerns.annotation.declared.correctly.error.annotation.declared.in.class=@Concerns annotation can only be declared at interface
concerns.annotation.declared.correctly.fix.remove.annotation=Remove @Concerns annotation

# =======
# Actions
# =======

# -------------------------
# Create concern in package
# -------------------------
createConcernOfInPackage.menu.action.text=Qi4j Concern Of
createConcernOfInPackage.menu.action.description=Creates new Qi4j ConcernOf
createConcernOfInPackage.dlg.title=New Qi4j ConcernOf
createConcernOfInPackage.dlg.prompt=Enter name for new ConcernOf
createConcernOfInPackage.command.name=Create ConcernOf
createConcernOfInPackage.progress.text=Creating ConcernOf ''{0}'' class
createConcernOfInPackage.error.title=Create concern fail

# *****************************************************************************
# Mixin
# *****************************************************************************

# ==========
# Inspection
# ==========

# ----------------------------
# Mixins implements mixin type
# ----------------------------
mixin.implements.mixin.type.name.display=Mixin class implements Mixin type class
mixin.implements.mixin.type.fix.remove.class.reference=Remove ''{0}'' mixin class reference.
mixin.implements.mixin.type.error.does.not.implement.any.mixin.type=Mixin class ''{0}'' does not inherit any mixin type of ''{1}''
mixin.implements.mixin.type.error.mixin.is.an.interface=Mixin class ''{0}'' is an interface
mixin.implements.mixin.type.error.mixin.is.a.concern=''{0}'' class is a concern
mixin.implements.mixin.type.error.mixin.is.a.side.effect=''{0}'' class is a side effect

# ------------------------------------------
# Mixins declared on mixin type or composite
# ------------------------------------------
mixins.annotation.declared.on.mixin.type.name.display=@Mixins must be declared on interface
mixins.annotation.declared.on.mixin.type.error.declared.on.class=@Mixins can only be declared on interface
mixins.annotation.declared.on.mixin.type.fix.remove.mixins.annotation=Remove @Mixins annotation

# *****************************************************************************
# Side Effect
# *****************************************************************************

# ==========
# Inspection
# ==========
side.effects.annotation.declared.correctly.name.display=@SideEffects annotation declared correctly
side.effects.annotation.declared.correctly.error.side.effect.does.not.extend.side.effect.of=Side Effect class ''{0}'' does not inherit ''org.qi4j.composite.SideEffectOf'' class.
side.effects.annotation.declared.correctly.fix.remove.class.reference=Remove ''{0}'' class reference
side.effects.annotation.declared.correctly.error.annotation.declared.in.class=@SideEffects annotation can only be declared at interface
side.effects.annotation.declared.correctly.fix.remove.annotation=Remove @SideEffects annotation

# *****************************************************************************
# Injections
# *****************************************************************************

# -----------------
# Common Inspection
# -----------------
abstract.injection.annotation.declaration.inspection.error.annotation.not.declared.correctly=''{0}'' can only be declared in constructor parameters or non static class field.

# -------------------
# @Structure injection
# -------------------

# ==========
# Inspection
# ==========
injections.structure.annotation.declared.correctly.name.display=@Structure Injection
injections.structure.annotation.declared.correctly.error.invalid.injection.type=@Structure does not inject ''{0}'' type.
injections.structure.annotation.declared.correctly.fix.remove.annotation=Remove @Structure annotation

# -----------------
# @Service injection
# -----------------

# ==========
# Inspection
# ==========
injections.service.annotation.declared.correctly.name.display=@Service Injection
injections.service.annotation.declared.correctly.error.type.is.injected.by.structure=''{0}'' type is injected by @Structure
injections.service.annotation.declared.correctly.fix.remove.annotation=Remove @Service annotation
injections.service.annotation.declared.correctly.fix.replace.with.structure.annotation=Replace @Service with @Structure annotation

# -----------------
# @Invocation injection
# -----------------

# ==========
# Inspection
# ==========
injections.invocation.annotation.declared.correctly.name.display=@Invocation Injection
injections.invocation.annotation.declared.correctly.error.type.is.injected.by.structure=''{0}'' type is injected by @Structure
injections.invocation.annotation.declared.correctly.error.type.is.not.injectable=''{0}'' type is not injectable by @Invocation
injections.invocation.annotation.declared.correctly.fix.remove.annotation=Remove @Invocation annotation
injections.invocation.annotation.declared.correctly.fix.replace.with.structure.annotation=Replace @Invocation with @Structure annotation

# *****************************************************************************
# Applies To
# *****************************************************************************

# ==========
# Inspection
# ==========
applies.to.annotation.declared.correctly.error.annotation.must.be.declared.on.class=@AppliesTo must be declared on class
applies.to.annotation.declared.correctly.error.value.is.invalid.for.mixin=''{0}'' is neither an interface or implements ''AppliesToFilter''
applies.to.annotation.declared.correctly.error.value.requires.class.to.extends.GenericConcern=''{0}'' requires ''{1}'' to extends GenericConcern
applies.to.annotation.declared.correctly.error.value.requires.class.to.extends.GenericSideEffect=''{0}'' requires ''{1}'' to extends GenericSideEffect
applies.to.annotation.declared.correctly.error.value.requires.class.to.implements.InvocationHandler=''{0}'' requires ''{1}'' to implements InvocationHandler
applies.to.annotation.declared.correctly.error.value.requires.class.to.implement.interface.or.extends.GenericConcern=''{0}'' requires ''{1}'' to implement ''{0}'' interface or to extends ''GenericConcern''
applies.to.annotation.declared.correctly.error.value.requires.class.to.implement.interface.or.extends.GenericSideEffect=''{0}'' requires ''{1}'' to implement ''{0}'' interface or to extends ''GenericSideEffect''
applies.to.annotation.declared.correctly.error.value.requires.class.to.implement.value.interface.or.implements.InvocationHandler=''{0}'' requires ''{1}'' to implement ''{0}'' or ''InvocationHandler'' interface
applies.to.annotation.declared.correctly.error.annotation.value.is.invalid.for.non.mixin=''{0}'' is not an annotation or ''AppliesToFilter'' or an interface
applies.to.annotation.declared.correctly.fix.remove.annotation=Remove ''@AppliesTo'' annotation
applies.to.annotation.declared.correctly.fix.remove.class.reference=Remove ''{0}'' class reference
